%% Setup notes:
%%
%% Run the following queries in a cqlsh session:
%% CREATE KEYSPACE DEMO WITH strategy_class = SimpleStrategy AND strategy_options:replication_factor = 1;
%% CREATE COLUMNFAMILY test (KEY varchar PRIMARY KEY, val blob);

%% Cassandra v2.0.1 - adjust replication_factor accordingly
%% DROP KEYSPACE DEMO;
%% CREATE KEYSPACE DEMO WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3' };
%% USE DEMO;
%% CREATE COLUMNFAMILY test (KEY varchar PRIMARY KEY, val blob);

%% For timeseries with composite keys/Cassandra v2.0.1 - adjust replication_factor accordingly
%% DROP KEYSPACE DEMO;
%% CREATE KEYSPACE DEMO WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3' };
%% USE DEMO;
%% CREATE TABLE test (partition_key text, row_key timestamp, val blob, PRIMARY KEY (partition_key,row_key));

{mode, max}.

{duration, 1}.

{concurrent, 5}.

{driver, basho_bench_driver_cassandra_cql}.

%% Preload only
%%{key_generator, {int_to_str, {partitioned_sequential_int, 50000}}}.
%% Timeseries tests
{key_generator, {partitioned_sequential_int, 50000, 1000000000}}.


%% All other single_value tests
%%{key_generator, {int_to_str, {uniform_int, 50000}}}.

{value_generator, {fixed_bin, 100}}.

{cassandra_ips, [{"localhost", 9042}]}.
%%{cassandra_port, 9042}.

{cassandra_keyspace, "DEMO"}.
{cassandra_columnfamily, "test"}.
{cassandra_column, "val"}.

%% If using put_composite and query_composite, set these and use the composite key schema.
%% {cassandra_composite_partition_column, "partition_key"}.
%% {cassandra_composite_row_column, "row_key"}.
%% {cassandra_range_query_num_rows, 500}.

%% Uncomment to set the read and write consistency levels.
%% See deps/cqerl/include/cqerl.hrl for acceptable values.
%% These are the defaults if not provided:
%% {cassandra_read_consistency, 1}. % CQERL_CONSISTENCY_ONE
%% {cassandra_write_consistency, 4}. % CQERL_CONSISTENCY_QUORUM


{operations, [{put, 1},{get, 1},{delete, 1}]}.
%%{operations, [{put_composite, 10}, {query_composite, 1}]}.
%%{operations, [{query_composite, 1}]}.
%% NOTE: insert is functionally and perfomance-equivalent to a put.
%% `insert` and `put` now use the same code path - `insert` was preserved
%% only for backward_compatibility
%%{operations, [{insert, 10}]}.
%%{operations, [{put, 1}]}.
%%{operations, [{get, 1}]}.
%%{operations, [{delete, 1}]}.

{code_paths, ["./deps/cqerl/ebin", "./deps/pooler/ebin",  "./deps/uuid/ebin",
              "./deps/semver/ebin"]}.
