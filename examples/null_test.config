{mode, max}.

{duration, 5}.
{report_interval, 1}.

{concurrent, 8}.

{driver, basho_bench_driver_null}.

%% Simple key generator: generate a sequential integer (that is unique
%% across concurrent worker processes), then convert it to a binary blob
%% of 32 bits, big endian-style.  This will create binary keys that are in
%% lexigraphic sorting order.
%{key_generator, {int_to_bin_bigendian, {partitioned_sequential_int, 5000000}}}.

%% More complex key generator:
%%   * Generate a randon number between 1 and 40000000 (40 million)
%%   * Convert it to a binary blob of 32 bits, big endian-style
%%   * Prepend <<"seed1">>
%%   * Hash the result with MD5, resulting in a 16 byte binary.
{key_generator, {{crypto_hash, md5}, {concat_binary, <<"seed1">>, {int_to_bin_bigendian, {partitioned_sequential_int, 40000000}}}}}.

{disable_sequential_int_progress_report, true}.
{value_generator, {fixed_bin, 10248}}.

%% Our ops: 75% of 'absolutely_nothing'
%%          15% of 'do_something'
%%          10% of 'do_something_else'
{operations, [{absolutely_nothing, 15},
              {do_something, 3},
              {do_something_else, 2}]}.
